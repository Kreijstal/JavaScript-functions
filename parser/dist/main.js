/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./interactive.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./interactive.js":
/*!************************!*\
  !*** ./interactive.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var lang=__webpack_require__(/*! ./lang.js */ \"./lang.js\");\nvar expressionFeatures=__webpack_require__(/*! ./lang.js */ \"./lang.js\")\nvar regexGrammar=__webpack_require__(/*! ./regex-rules.js */ \"./regex-rules.js\")\nvar parse=__webpack_require__(/*! ./parser.js */ \"./parser.js\")\n\nconsole.log('parse(expressionFeatures, regexGrammar, \"/hell\"+ \"o/\");')\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbnRlcmFjdGl2ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2ludGVyYWN0aXZlLmpzP2IwNGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGxhbmc9cmVxdWlyZSgnLi9sYW5nLmpzJyk7XG52YXIgZXhwcmVzc2lvbkZlYXR1cmVzPXJlcXVpcmUoJy4vbGFuZy5qcycpXG52YXIgcmVnZXhHcmFtbWFyPXJlcXVpcmUoJy4vcmVnZXgtcnVsZXMuanMnKVxudmFyIHBhcnNlPXJlcXVpcmUoJy4vcGFyc2VyLmpzJylcblxuY29uc29sZS5sb2coJ3BhcnNlKGV4cHJlc3Npb25GZWF0dXJlcywgcmVnZXhHcmFtbWFyLCBcIi9oZWxsXCIrIFwiby9cIik7JylcblxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./interactive.js\n");

/***/ }),

/***/ "./lang.js":
/*!*****************!*\
  !*** ./lang.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var parse=__webpack_require__(/*! ./parser-constants.js */ \"./parser-constants.js\")\n/*\nexpressionFeatures is basically an object that defines how the grammar object should be interpreted BY STEPS!\n*/\nvar expressionFeatures = {\n  array: function sequence(match) {\n    //check if child has errored, sequence ensures that everything should be matched, therefore error will bubble up, parse.THROW\n    if (match.childStep) {\n      if (match.childStep.fail) {\n        return [parse.THROW, \"Array Error: Sequence: didn't match completely. Children have errored. At index \" + match.indexOf]\n      }\n      //If children returned result, then\n      if (match.childStep.result) {\n        //if local result doesn't exist, create one\n        if (!match.result) { match.result = []; }\n        //push result\n        match.result.push(match.childStep.result);\n        //clear global result\n      }\n      if(match.childStep.indexOf!==match.indexOf){\n    \tmatch.indexOf=match.childStep.indexOf\n    }\n    }\n    //create iterator if not already created\n    match.iterator|=0;\n    //get next iteration\n    var val = match.context[match.iterator++];\n    //if iteration is not undefined parse.STEP_IN into next iteration\n    if (val !== undefined) {\n      return [parse.STEP_IN, val]\n    }\n    //otherwise parse.STEP_OUT\n    else {\n      return [parse.STEP_OUT];\n    }\n t},\n  string: function literalmatch(match, textToParse) {\n    //Note: I had to add comments because reading was truly a pain\n    //trim text to parse to be as long as string to match (from indexOf), let that. be str\n    var str = textToParse.substr(match.indexOf-(match.reverse?match.context.length:0), match.context.length),\n      //trim string to match, to be as long as str is (from match.indexOf-parseContext.indexOf), let that be str2\n      str2 = match.context.substr(match.indexOf - match.startIndexOf, str.length)\n    //str2 is needed in order to match partial matches when the text to parse is incomplete\n    //match.indexOf is local indexOf, this will be different from parseContext.indexOf (the expressionFeature indexOf) if parser has been halted before\n    //if str equals str2\n    if (str === str2) {\n      //match.indexOf (cursor) is moved the str (or str2) distance\n      match.indexOf += str.length*(match.reverse?-1:1);\n      //if string to match is longer than str then HALT (assume that text to parse is not complete)\n      if (match.context.length > str.length) {\n        if(match.isFinal())return [parse.THROW,\"String match: EOF Reached\"]\n        return [parse.HALT]\n      }\n      else {\n        //else parse.STEP_OUT\n        //no result because literal match is literal\n        match.result=str2;//result because debugging.\n        return [parse.STEP_OUT];\n      }\n    }\n    //else parse.THROW\n    else {\n      //debugger\n      return [parse.THROW, \"String Error: expected \\\"\" + match.context + \"\\\", found \\\"\" + str + \"\\\" at index:\" + match.indexOf]\n    }\n  },\n  meta: { restorable: [\"repetition\", \"or\"] },\n  object: {\n    repetition: function quantifier(match) {\n      //Repetitions can be greedy, lazy, possessive\n      //if match.matches doesn't exist create one\n      //match.matches is used to store the different matches that the repetition has caught.\n      if (!match.matches) {\n        match.matches = []\n      }\n            //if parse tree was restored\n      //then keep trying to match another option, if greedy take 1 less, if lazy take 1 more\n      if (match.restored) {\n        match.restored = false;\n        switch (match.context.quantifier) {\n          case \"greedy\":\n            //attempt to take 1 less unit, if there is less than from, repetition fails\n            if (match.matches.length > match.context.from) {\n              match.matches.pop();\n              //match.result.pop();\n              match.indexOf = match.matches[match.matches.length - 1]\n              return [parse.STEP_OUT]\n            }\n            else {\n              return [parse.THROW, \"Attempted to take 1 less unit in greedy pattern, in \" + match.indexOf + \" but doing so exceeded the defined bounds.\"]\n            }\n            break;\n          case \"lazy\":\n            //attempt to take 1 more unit, if it fails, repetition fails\n            if (match.matches.length < match.context.to) {\n              match.lazypass = true;\n              //despite the pattern is lazy, it has failed so it must take the following step\n            }\n            else {\n              return [parse.THROW, \"Attempted to take 1 more unit in lazy pattern, in \" + match.indexOf + \" but doing so exceeded the defined bounds.\"]\n            }\n            break;\n        }\n      }\n      //if children returned result\n      else if (match.childStep) {\n        if (match.childStep.result) {\n          if (!match.result) {\n            match.result = [];\n          }\n          match.result.push(match.childStep.result);\n          match.matches.push(match.indexOf)\n        }\n        //Reasons for Repetition to end\n        //Repetition iteration threw error while trying to match next repetition item\n        //Repetition reached maximum number of items\n        if (match.childStep.fail || (match.matches.length === match.context.to)) { //could be restored, or could be group value was falsy\n          //Not bubbling errors up.\n          //if loop failed\n          //check if loop requirements match or if its lazy (if it's lazy that means that an attempt to match failed therefore pattern failed to match)\n          if ((match.context.quantifier !== \"lazy\") && (match.context.from <= match.matches.length && match.context.to >= match.matches.length)) {\n            //requirements seem to fit!\n            if(match.childStep.indexOf){\n              match.indexOf=match.childStep.indexOf\n            }\n            return [parse.STEP_OUT]\n          }\n          else { //requirements dont match\n            return [parse.THROW, \"Repetition ended at \" + match.indexOf + \" and either repetition exceeded bounds or failed matching a lazy pattern\"]\n          }\n        }\n      }\n      //if iterator is bigger than from and it is lazy but its not lazypassed, then\n      if ((match.matches.length > match.context.from) && (match.context.quantifier === \"lazy\") && (!match.lazypass)) {\n        if(match.childStep.indexOf){\n              match.indexOf=match.childStep.indexOf\n            }\n        return [parse.STEP_OUT]\n      }\n      match.lazypass = false;\n      return [parse.STEP_IN, match.context.child];\n    },\n    pointer: function(match, textToParse) {\n      if (match.childStep) {\n        if(match.childStep.fail)\n        return [parse.THROW,\"pointer failed\"]\n        match.result = match.childStep.result;\n        match.indexOf=match.childStep.indexOf\n        return [parse.STEP_OUT];\n      }\n      return [parse.STEP_IN, match.grammarKey(match.context.value)];\n    },\n    or: function alternation(match) { //well shit\n      //{type:\"or\",child:node[]}\n      if (match.childStep) {\n        if ((match.childStep.fail||match.restored) && (match.context.choices.length === match.iterator)) { //none of the choices work\n          return [parse.THROW, \"Alternation Error: None of the options in the alternation match. At index \" + match.indexOf]\n        }\n        else if ((!match.childStep.fail) && (match.iterator !== undefined)) {\n          if(match.childStep.result){\n          match.result = match.childStep.result;\n          }else{\n            match.result=match.iterator\n          }\n          match.indexOf=match.childStep.indexOf\n          return [parse.STEP_OUT];\n        }\n      }\n\n      match.iterator |=0;\n      var v = match.context.choices[match.iterator++];\n      if (v) {\n        return [parse.STEP_IN, v];\n      }\n      else {\n        return [parse.THROW, \"Alternation Error: None of the options in the alternation match. At index \" + match.indexOf]\n      }\n    },\n    //wildcard always matches a character\n    wildcard:function wildcard(match,text){\n//{type:\"wildcard\",value:[{from:5,to:7},\"a\",\"b\"],negative:false}\n      var t=text[match.indexOf-match.reverse],v\n      if(!t)    return [parse.THROW,\"Wildcard can't match empty string\"];\n      v=match.context.value.find(function(a){if(typeof a===\"object\"){return a.to>=t.charCodeAt()>=a.from}else{return a===t}})\n      v=match.context.negative?(v?false:t):v;\n      if(t===\"\"){\n        if(match.isFinal()){\n            return [parse.THROW,\"Wildcard can't match empty string\"];\n        }else{\n        return [parse.HALT];\n        }\n        \n      }\n      if (v) {\n        match.result=t;\n        //I SERIOUSLY CHANGING THE INDEXOF WHEN THE END OF \n        match.indexOf+=(match.reverse&&-1)|1;//match.reverse?-1:1\n        return [parse.STEP_OUT];\n      }\n      else {\n        return [parse.THROW, \"No value for wildcard\"]\n      }\n    },reverse:function(match){\n      match.reverse=!match.reverse\n      if(match.childStep){\n        if(match.childStep.fail) return [parse.THROW,match.childStep.failMsg]\n        match.result=match.childStep.result;\n        match.indexOf=match.childStep.indexOf\n        return [parse.STEP_OUT]\n      }\n      return [match.STEP_IN,match.context.value]\n    },variable:function(match){\n      var variables=match.variable();\n      if(match.childStep){\n        //I think most steps return a result and an indexOf to parent\n        if(match.childStep.fail) return [parse.THROW,match.childStep.failMsg]\n        match.result=variables[match.context.key]=match.childStep.result;\n        match.indexOf=match.childStep.indexOf\n        return [parse.STEP_OUT]\n      }\n      if(typeof match.context.value==\"undefined\"){\n        match.result=variables[match.context.key]\n        if(!match.result){\n          throw new ReferenceError(\"Value is undefined, and there is no variableKey \\\"\"+match.context.key+\"\\\" set.\")\n        }\n        return [parse.STEP_IN,match.result]\n      }else{\n        return [parse.STEP_IN,match.context.value]\n      }\n    },assertion:function(match,text){\n      //{type:\"assertion\",value:<pattern>,[negative:<boolean>]}\n       if(match.childStep){\n        if(match.childStep.fail!==match.negative) \n        return [parse.STEP_OUT]\n      }\n      //EOF assertions\n      if(match.context.value===\"\"){\n        if(match.indexOf===text.length){\n          return [parse.STEP_OUT]\n        }else{\n          return [parse.THROW,\"Assertion failed\"]\n        }\n      }\n      return [match.STEP_IN,match.context.value]\n      \n    },atomic:function(match){\n      match.atomicity=match.restore;\n     if(match.childStep){\n        if(match.childStep.fail) return [parse.THROW,match.childStep.failMsg]\n        match.result=match.childStep.result;\n        match.indexOf=match.childStep.indexOf\n        return [parse.STEP_OUT]\n      }\n      return [match.STEP_IN,match.context.value]\n    }\n  },\n  null: function() { return [parse.THROW, \"attempted to match null\"] }\n}\nmodule.exports = expressionFeatures;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lang.js\n");

/***/ }),

/***/ "./parser-constants.js":
/*!*****************************!*\
  !*** ./parser-constants.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n\tverbose : false,\nSTEP_OUT : 1,\nSTEP_IN : 2,\nRemoveNode : 6,\nTHROW : 0,\nHALT : 3, //it haltes loop without going further in or out\nSaveStateOut : 4,\nSaveStateIn : 5}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYXJzZXItY29uc3RhbnRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcGFyc2VyLWNvbnN0YW50cy5qcz9jMjczIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXHR2ZXJib3NlIDogZmFsc2UsXG5TVEVQX09VVCA6IDEsXG5TVEVQX0lOIDogMixcblJlbW92ZU5vZGUgOiA2LFxuVEhST1cgOiAwLFxuSEFMVCA6IDMsIC8vaXQgaGFsdGVzIGxvb3Agd2l0aG91dCBnb2luZyBmdXJ0aGVyIGluIG9yIG91dFxuU2F2ZVN0YXRlT3V0IDogNCxcblNhdmVTdGF0ZUluIDogNX1cblxuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./parser-constants.js\n");

/***/ }),

/***/ "./parser.js":
/*!*******************!*\
  !*** ./parser.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*I want to build a generic parser, that parses RegEx, \nand it's pausable by itself, I'm doing this for a project.*/ \nvar Tree=__webpack_require__(/*! ./tree.js */ \"./tree.js\")\n//Get Type\nfunction getType(value) { //returns a string getting the type of the object: array, object, integer, etc. Taken from Chrome's code.\n  var s = typeof value;\n  if (s == \"object\") {\n    if (value === null) {\n      return \"null\";\n    }\n    else if (Object.prototype.toString.call(value) == \"[object Array]\") {\n      return \"array\";\n    }\n    else if (typeof(ArrayBuffer) != \"undefined\" &&\n      value.constructor == ArrayBuffer) {\n      return \"binary\";\n    }\n  }\n  else if (s == \"number\") {\n    if (value % 1 == 0) {\n      return \"integer\";\n    }\n  }\n  return s;\n};\n\nif (!Array.prototype.includes) {\n  Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {\n    'use strict';\n    var O = Object(this);\n    var len = parseInt(O.length) || 0;\n    if (len === 0) {\n      return false;\n    }\n    var n = parseInt(arguments[1]) || 0;\n    var k;\n    if (n >= 0) {\n      k = n;\n    }\n    else {\n      k = len + n;\n      if (k < 0) { k = 0; }\n    }\n    var currentElement;\n    while (k < len) {\n      currentElement = O[k];\n      if (searchElement === currentElement ||\n        (searchElement !== searchElement && currentElement !== currentElement)) { // NaN !== NaN\n        return true;\n      }\n      k++;\n    }\n    return false;\n  };\n}\n/*\nUSAGE&EXAMPLES: \nThis function accepts a grammar object, and a string to parse. Grammar objects contain the information needed to parse whichever the string contains.\nA grammar object is a map (an associative array), in which it's keys are labels given by the programmer with the exception of the \"grammar\" label which is the initial/starting/main key, the values are patterns:\nThis is defined by expressionFeatures (parserSteppers), and behavour can be changed by so\nA pattern/feautre is either an object, a native array or a string, they can be:\n\n<pattern>:\ndef:(<pattern>[]|<string>|{type:\"repetition\",to:<int>,from:<int>,quantifier:(\"lazy\"|\"greedy\"),child:<pattern>}|{type:\"or\",child:<pattern>[]}|{type:\"wildcard\",value:({from:<int>,to:<int>}|<char>)[][,negative:<boolean>]}|{type:\"pointer\",value:<string>}|{type:\"var\",key:<string>[,set:<pattern>]})\n\n #An array (basically a noncapturing group)\n  Description: concantenated patterns, or a progression/sequence/continuum of patterns \n  def:<pattern>[]\n  Usage example: [pattern1,pattern2]\n   *they would be described in a native array of <pattern>s \n\n   *the result is an array of children results, if children don't result, no result is thrown.\n   \n #A repetition/quantifier \n  Description: pattern, used in order to match repeated sequences*\n  def:{type:\"repetition\",to:<int>,from:<int>,quantifier:(\"lazy\"|\"greedy\"),child:<pattern>}\n   *the result is an array of children results, if children don't result, no result is thrown.\n  Well, I know this is a bit lazy, but I had to consider that repetitions could return two totally different results for alternation patterns\n  TODO: indicate result repetition\n  \n #(A choice|An alternation)\n  Description: An alternation allows to match pattern or another pattern exclusively\n  def:{type:\"or\",child:<pattern>[]}\n  \n#A (wildcard/range|character class)\n  Description:allows a character to match the values given\n  def:{type:\"wildcard\",value:({from:(<int>|<char>),to:(<int>|<char>)}|<char>)[][,negative:<boolean>]}\n  Usage example: {type:\"wildcard\",value:[{from:5,to:7},\"a\",\"b\"],negative:false}\n  The range pattern value is an array which contains the desired characters to match, or an object containing a from, to. The latter is a range mathing the character codes.\n  \n  \n#A pointer\n  Description: a pointer allows recursiveness, so you can define many key patterns in grammar, and you switch to them\n  def:  {type:\"pointer\",value:<string>}\n  Usage example: {type:\"pointer\",value:\"grammar\"} //would point to the main key\n \n#Variables\n  def: {type:\"variable\",key:<string>[,value:<pattern>]}\n  Usage example: {type:\"var\",key:\"your key\",set:node}\n  When there is no \"set\" it will attempt to get the value of the variable.\n \n#A string pattern \n  Description: matches a string literally\n  def:<string>\n  would be just described as a normal string\n \n#An assertion (lookahead)\n def:{type:\"assertion\",value:<pattern>,[negative:<boolean>]}\n These are zero-length assertions like lookarounds or \\b in regex, basically conditional expressions these are btw atomic\n \n#A reverse statment\n  Description: will start matching <pattern> in reverse, why would you do this? Doesn't reverse order of strings, so this will confuse you :)\n  def:{type:\"reverse\",value:<pattern>}\n  Usage example:{type:\"reverse\",value:[\"ab\",\"ta\"]}//will only match taab\n  Normally matches are RTL but if you want to match it LTR that is fine too, please consider that this will just reverse the direction of the cursor, literal strings should work RTL just as fine, but arrays and other orbjects will be read as given\n  (Nested reverses will match again RTL)\n  \n#An atomic node\n  Description: makes a pattern atomic, Atomic nodes would disallow bakctracking when it does return.\n  def: {type:\"atomic\",value:<pattern>} \n  \n \nNote that regex /a?/ would be described as a quantifier pattern, like /a{0,1}/\nfor example, the pattern [\"human\",{type:\"repetition\",to:0,from:1,child:\"s\"}] would match \"human\" and \"humans\"\nIt's not intended for a programmer to write the pattern themselves, since they're mostly a translation of regex. a representation of em\n*Alright but before we continue, we must first mention 2 patterns that can actually change its content, those are alternations and quantifiers.\nbecause alternations and quantifiers can match before all their possibilities are tested, we need a way for them to store their state.\n\nA restore triggers when parent expression indexOf is lesser than where restore is from.\n*/\n\n//So, this long expected \"reader-macro begins\"\nvar asdf=[]\nfunction parse(parserSteppers, grammar, textToParse, parseContext, final, timeOut) { //function start\n  /*Since coding this is taking way longer than usual, I'd better write the specifications of this function.\n  This function takes a grammar, a string and a parseContext, it returns a parseContext. This function should be able to return parsing contexts for incomplete strings of data. It takes a parseContext if this function has been called before and it retakes the job from there.\n  The grammar is specified in an object, the rules are above this function.\n  textToParse is of type string, it's the string about to be parsed\n  parseContext, is null, its only used when textToParse was \"incomplete\" last time, and now there's more information in order to finish parsing\n  final, default to true, if false it means that the textToParse is not complete, and it will just attempt to parse what it can with what it has, it will halt when it cannot read more\n  */\n  /**/\n  //Step constructor\n  function Step(context, index) {\n    if (!(context instanceof this.constructor)) { this.context = context;\n    this.indexOf = index;\n    this.startIndexOf = index;\n    this.result = null }else{\n      Object.assign(this,context)\n      this.result=this.result&&this.result.slice(0)\n      if(this.matches)this.matches=this.matches.slice(0)\n    }\n    this.restore = parseContext.restore;\n    this.reverse = parseContext.reverse;\n    //if(!this.context){throw new Error('No context given!')}\n  }//This must be wrong, forgive me\n    Step.prototype.grammarKey = function(val) {\n      return grammar[val]\n    }\n    Step.prototype.variable = function() {\n      return parseContext.variables\n    }\n    Step.prototype.isFinal=function(){\n      return final;\n    }\n    if(final===void 0)final=true;\n  if (!parseContext) { //if there is no parseContext, create one\n    parseContext = { indexOf: 0, fail: false, restore: 0, result: null, variables:{},reverse:false };\n    //A restore value is a map that contains 3 elements\n    parseContext.root=new Tree(\"root\")\n    parseContext.stepInfo = parseContext.root.addChild(new Step(grammar.grammar, 0));\n  }\n  function stepInProcedure(context) {\n    var startIndexOf = parseContext.stepInfo.data.indexOf;\n    parseContext.stepInfo = parseContext.stepInfo.addChild(new Step(context, startIndexOf));\n  }\n  function stepOutProcedure(f) {\n    //function is called when function has checked and it was to continue to the next iteration\n    //f is a boolean value saying the match fail is true, if if is true, the match failed\n    //fun fact: if the function returns false, it will bubble up until it finds a lower restorable value and then bubble down\n    \n    var childStep = parseContext.stepInfo, childData = childStep.data, s;\n    parseContext.stepInfo = parseContext.stepInfo.parent;\n    \n      if (f&&(s=childStep.previousSibling())) {\n        //If function failed but it has a sibling, restore that sibling\n      parseContext.restore--;\n      childStep.detachFromParent()\n      while(s=s.getLastChild()){\n        parseContext.stepInfo=s\n      }\n      parseContext.stepInfo.childStep=null\n      parseContext.stepInfo.data.restored=true;\n      return;\n    } \n    if(parseContext.stepInfo.data==\"root\"){\n        childData.fail = f\n        return}\n    if (childData.restore === parseContext.restore) {\n      childStep.detachFromParent()\n      /*if(parseContext.stepInfo.data.restore!== parseContext.restore){\n        parseContext.stepInfo=parseContext.stepInfo.parent.addChild(new Step(parseContext.stepInfo.data))\n        }*/\n    }//else\n       if(parseContext.stepInfo.data.restore!== parseContext.restore){\n      parseContext.stepInfo=parseContext.stepInfo.parent.addChild(new Step(parseContext.stepInfo.data))\n        \n      }\n      /*else {parseContext.stepInfo=new Step(parseContext.stepInfo.data);\n      throw new Error('wait, no parent??');\n      }*/\n    \n    parseContext.stepInfo.data.childStep = childData\n    //THIS SHOULD BE SOME KIND OF PARENT FLAG\n    childData.fail = f\n    //NOOOOO parseContext.stepInfo.data.indexOf = childData.indexOf;\n    return;\n  }\n  mainloop: //begins looping over grammar object\n    do {\n//console.log('executed mainloop');\n      var match = parseContext.stepInfo.data,\n        type = getType(match.context);\n      var stepper = parserSteppers[type],\n        nextParseInstruction;\n      if (type === \"object\") {\n        stepper = stepper[match.context.type];\n      }\n      //coolTree=(function(){var ppapa=\"\";parseContext.root.forEach(function(i,ii){    var t=getType(i.data.context);    if(i.data==\"root\"){t=\"root\"}else if(t==\"object\"){        t=i.data.context.type;    }    i.string=ii+\",\"+i.data.restore+\": \"+t+(t==\"array\"?\" length:\"+i.data.context.length+\" iterator:\"+i.data.iterator:\"\")+(t==\"or\"?\" choices:\"+i.data.context.choices.length+\" iterator:\"+i.data.iterator:\"\")+(t==\"string\"?\":\"+i.data.context:\"\")+(t==\"pointer\"?\":\"+i.data.context.value:\"\")+(t==\"repetition\"?\", reps:\"+(i.data.matches&&i.data.matches.length)+\" \"+i.data.context.quantifier:\"\");    if(i.parent&&i.parent.string)  ppapa+=JSON.stringify(i.parent.string)+\"->\"+JSON.stringify(i.string)+\";\\n\";});return ppapa})\n      function getResult(v){if(!v){return null}var m=[];m.push(v.data.result);if(v.children){m=m.concat(getResult(v.children[v.children.length-1]))};return m}\n      coolTree2=(function(){\nvar ppapa=\"\";parseContext.root.forEach(function(i,ii){\n    \n    var t=getType(i.data.context)\n    if(i.data==\"root\"){t=\"root\"}else if(t==\"object\"){\n        t=i.data.context.type\n    }\n    i.string=i.data.restore+\": \"+t+(t==\"array\"?\" length:\"+i.data.context.length+\" iterator:\"+i.data.iterator:\"\")+(t==\"or\"?\" choices:\"+i.data.context.choices.length+\" iterator:\"+i.data.iterator:\"\")+(t==\"string\"?\":\"+i.data.context:\"\")+(t==\"pointer\"?\":\"+i.data.context.value:\"\")+(t==\"repetition\"?\", reps:\"+(i.data.matches&&i.data.matches.length)+\" \"+i.data.context.quantifier:\"\");\n    \n    ppapa+=Array.apply(this,Array(ii)).map(function(){return \"│   \"}).join('')+\"├\"+JSON.stringify(i.string)+\"\\n\"\n});return \"Rollbacktree:\"+ppapa+\"\\nLastResult:\"+getResult(parseContext.root).join()})\n\n\n\n      if(match.indexOf>textToParse.length){\n        //why would the indexOf be bigger than the textToParse?  \n        throw new Error('This should never happen, it means the method before has added too many elements to indexOf greater than the length of the text that must be parsed')\n      }\ndebugger;\n      nextParseInstruction = stepper(match, textToParse);\n      parseContext.reverse=match.reverse;\n      if (type === \"object\"&&parserSteppers.meta.restorable.includes(match.context.type)) {\n        if (nextParseInstruction[0] === parse.STEP_OUT) { nextParseInstruction[0] = parse.SaveStateOut }\n      }\n      //different instructions!\n      switch (nextParseInstruction[0]) {\n        case parse.THROW:\n          if(parse.verbose)console.error(nextParseInstruction[1])\n          match.failMsg=nextParseInstruction[1]\n          stepOutProcedure(true, match);\n          continue;\n          break;\n        case parse.STEP_IN:\n          if(!nextParseInstruction[1]){\n            throw new Error(\"Step requested a step in but no declared instruction to step into.\")\n          }\n          stepInProcedure(nextParseInstruction[1]);\n          continue;\n          break;\n        case parse.SaveStateOut:\n          parseContext.restore++;\n          //parseContext.restore = parseContext.restore.parent;\n        case parse.STEP_OUT:\n          stepOutProcedure(false);\n          break;\n        case parse.HALT:\n          if(parse.verbose)console.log(\"parser halted\")\n          parseContext.halted=true;\n          break mainloop;\n          break;\n      }\n      continue;\n    } while (parseContext.stepInfo.data!==\"root\");\n    parseContext.result=parseContext.root.getLastChild().data.result\n    parseContext.fail=!!parseContext.root.getLastChild().data.fail\n    parseContext.indexOf=parseContext.root.getLastChild().data.indexOf\n    if(!parseContext.fail&&(final||!parseContext.halted))parseContext.fail=parseContext.indexOf!==textToParse.length\n    return parseContext;\n}\n\nObject.assign(parse,__webpack_require__(/*! ./parser-constants.js */ \"./parser-constants.js\"))\nmodule.exports=parse;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./parser.js\n");

/***/ }),

/***/ "./regex-rules.js":
/*!************************!*\
  !*** ./regex-rules.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var metachars = [\"[\", \"(\", \")\", \"+\", \"?\", \".\", \"*\"]\nvar regexGrammar = {\n  regex: [{ type: \"repetition\", to: 1, from: 0, quantifier: \"greedy\", child: \"^\" },{ type: \"repetition\", to: Infinity, from: 0, quantifier: \"lazy\", child: { type: \"or\", choices: [{ type: \"pointer\", value: \"group\" }, { type: \"pointer\", value: \"wildcard\" }, { type: \"pointer\", value: \"escape\" }, { type: \"pointer\", value: \"special\" }, wildcardToken(\"Anything\")] } }, { type: \"repetition\", to: 1, from: 0, quantifier: \"greedy\", child: \"$\" }],\n  wildcard: [\"[\", {\n    type: \"repetition\",\n    to: Infinity,\n    from: 0,\n    quantifier: \"greedy\",\n    child: {\n      type: \"or\",\n      child: [{ type: \"pointer\", value: \"escape\" },\n        [{ type: \"wildcard\", value: [\"]\"], negative: true }, { type: \"repetition\", to: 1, from: 0, quantifier: \"greedy\", child: ['-', [{ type: \"wildcard\", value: [\"]\"], negative: true }]] }]\n      ]\n    }\n  }, \"]\"],\n  group: ['(', { type: \"repetition\", to: 1, from: 0, quantifier: \"greedy\", child: { type: \"pointer\", value: \"groupTypes\" } }, ')'],\n  grammar: ['/', { type: \"pointer\", value: \"regex\" }, '/', { type: \"pointer\", value: \"flags\" }],\n  escape: [\"\\\\\", wildcardToken(\"Anything\")],\n  special: { type: \"or\", choices: [\"{\", { type: \"repetition\", from: 1, to: Infinity, quantifier: \"lazy\", child: wildcardToken(\"Digit\") }] },\n  groupTypes: {},\n  flags:{type:\"repetition\",from:0,to:5,quantifier:\"greedy\",child:[{type:\"variable\",key:\"wildcardvalue\",value:{type:\"wildcard\",value:[\"i\",\"m\",\"g\",\"u\",\"y\"]}},{type:\"assertion\",look:\"ahead\",negative:true,value:[{type:\"repetition\",from:0,to:5,quantifier:\"lazy\",child:{type:\"wildcard\",value:[\"i\",\"m\",\"g\",\"u\",\"y\"]}},{type:\"variable\",key:\"wildcardvalue\"}]}]}\n};\nfunction wildcardToken(type, negative) {\n  negative = negative | false;\n  switch (type) {\n    case \"Anything\":\n      return { type: \"wildcard\", value: [{ from: 0, to: Infinity }], negative: negative };\n      break;\n    case \"Digit\":\n      return { type: \"wildcard\", value: [{ from: 0x30, to: 0x39 }], negative: negative };\n      break;\n    case \"Whitespace\":\n      return { type: \"wildcard\", value: [{ from: \"\\u0009\", to: \"\\u000D\" }, \" \", \"\", \" \", \" \", { from: \"\", to: \"‍\" }, \" \", \" \", \"　\", \"᠎\", \"⁠\", \"﻿\"], negative: negative };\n      break;\n    default:\n      if (/[\\s\\S]-[\\s\\S]/.test(type)) {\n        return { type: \"wildcard\", value: [{ from: type[0], to: type[2] }], negative: negative };\n      }\n      break;\n  }\n}\nmodule.exports=regexGrammar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZWdleC1ydWxlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3JlZ2V4LXJ1bGVzLmpzP2Q4MDMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1ldGFjaGFycyA9IFtcIltcIiwgXCIoXCIsIFwiKVwiLCBcIitcIiwgXCI/XCIsIFwiLlwiLCBcIipcIl1cbnZhciByZWdleEdyYW1tYXIgPSB7XG4gIHJlZ2V4OiBbeyB0eXBlOiBcInJlcGV0aXRpb25cIiwgdG86IDEsIGZyb206IDAsIHF1YW50aWZpZXI6IFwiZ3JlZWR5XCIsIGNoaWxkOiBcIl5cIiB9LHsgdHlwZTogXCJyZXBldGl0aW9uXCIsIHRvOiBJbmZpbml0eSwgZnJvbTogMCwgcXVhbnRpZmllcjogXCJsYXp5XCIsIGNoaWxkOiB7IHR5cGU6IFwib3JcIiwgY2hvaWNlczogW3sgdHlwZTogXCJwb2ludGVyXCIsIHZhbHVlOiBcImdyb3VwXCIgfSwgeyB0eXBlOiBcInBvaW50ZXJcIiwgdmFsdWU6IFwid2lsZGNhcmRcIiB9LCB7IHR5cGU6IFwicG9pbnRlclwiLCB2YWx1ZTogXCJlc2NhcGVcIiB9LCB7IHR5cGU6IFwicG9pbnRlclwiLCB2YWx1ZTogXCJzcGVjaWFsXCIgfSwgd2lsZGNhcmRUb2tlbihcIkFueXRoaW5nXCIpXSB9IH0sIHsgdHlwZTogXCJyZXBldGl0aW9uXCIsIHRvOiAxLCBmcm9tOiAwLCBxdWFudGlmaWVyOiBcImdyZWVkeVwiLCBjaGlsZDogXCIkXCIgfV0sXG4gIHdpbGRjYXJkOiBbXCJbXCIsIHtcbiAgICB0eXBlOiBcInJlcGV0aXRpb25cIixcbiAgICB0bzogSW5maW5pdHksXG4gICAgZnJvbTogMCxcbiAgICBxdWFudGlmaWVyOiBcImdyZWVkeVwiLFxuICAgIGNoaWxkOiB7XG4gICAgICB0eXBlOiBcIm9yXCIsXG4gICAgICBjaGlsZDogW3sgdHlwZTogXCJwb2ludGVyXCIsIHZhbHVlOiBcImVzY2FwZVwiIH0sXG4gICAgICAgIFt7IHR5cGU6IFwid2lsZGNhcmRcIiwgdmFsdWU6IFtcIl1cIl0sIG5lZ2F0aXZlOiB0cnVlIH0sIHsgdHlwZTogXCJyZXBldGl0aW9uXCIsIHRvOiAxLCBmcm9tOiAwLCBxdWFudGlmaWVyOiBcImdyZWVkeVwiLCBjaGlsZDogWyctJywgW3sgdHlwZTogXCJ3aWxkY2FyZFwiLCB2YWx1ZTogW1wiXVwiXSwgbmVnYXRpdmU6IHRydWUgfV1dIH1dXG4gICAgICBdXG4gICAgfVxuICB9LCBcIl1cIl0sXG4gIGdyb3VwOiBbJygnLCB7IHR5cGU6IFwicmVwZXRpdGlvblwiLCB0bzogMSwgZnJvbTogMCwgcXVhbnRpZmllcjogXCJncmVlZHlcIiwgY2hpbGQ6IHsgdHlwZTogXCJwb2ludGVyXCIsIHZhbHVlOiBcImdyb3VwVHlwZXNcIiB9IH0sICcpJ10sXG4gIGdyYW1tYXI6IFsnLycsIHsgdHlwZTogXCJwb2ludGVyXCIsIHZhbHVlOiBcInJlZ2V4XCIgfSwgJy8nLCB7IHR5cGU6IFwicG9pbnRlclwiLCB2YWx1ZTogXCJmbGFnc1wiIH1dLFxuICBlc2NhcGU6IFtcIlxcXFxcIiwgd2lsZGNhcmRUb2tlbihcIkFueXRoaW5nXCIpXSxcbiAgc3BlY2lhbDogeyB0eXBlOiBcIm9yXCIsIGNob2ljZXM6IFtcIntcIiwgeyB0eXBlOiBcInJlcGV0aXRpb25cIiwgZnJvbTogMSwgdG86IEluZmluaXR5LCBxdWFudGlmaWVyOiBcImxhenlcIiwgY2hpbGQ6IHdpbGRjYXJkVG9rZW4oXCJEaWdpdFwiKSB9XSB9LFxuICBncm91cFR5cGVzOiB7fSxcbiAgZmxhZ3M6e3R5cGU6XCJyZXBldGl0aW9uXCIsZnJvbTowLHRvOjUscXVhbnRpZmllcjpcImdyZWVkeVwiLGNoaWxkOlt7dHlwZTpcInZhcmlhYmxlXCIsa2V5Olwid2lsZGNhcmR2YWx1ZVwiLHZhbHVlOnt0eXBlOlwid2lsZGNhcmRcIix2YWx1ZTpbXCJpXCIsXCJtXCIsXCJnXCIsXCJ1XCIsXCJ5XCJdfX0se3R5cGU6XCJhc3NlcnRpb25cIixsb29rOlwiYWhlYWRcIixuZWdhdGl2ZTp0cnVlLHZhbHVlOlt7dHlwZTpcInJlcGV0aXRpb25cIixmcm9tOjAsdG86NSxxdWFudGlmaWVyOlwibGF6eVwiLGNoaWxkOnt0eXBlOlwid2lsZGNhcmRcIix2YWx1ZTpbXCJpXCIsXCJtXCIsXCJnXCIsXCJ1XCIsXCJ5XCJdfX0se3R5cGU6XCJ2YXJpYWJsZVwiLGtleTpcIndpbGRjYXJkdmFsdWVcIn1dfV19XG59O1xuZnVuY3Rpb24gd2lsZGNhcmRUb2tlbih0eXBlLCBuZWdhdGl2ZSkge1xuICBuZWdhdGl2ZSA9IG5lZ2F0aXZlIHwgZmFsc2U7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJBbnl0aGluZ1wiOlxuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ3aWxkY2FyZFwiLCB2YWx1ZTogW3sgZnJvbTogMCwgdG86IEluZmluaXR5IH1dLCBuZWdhdGl2ZTogbmVnYXRpdmUgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJEaWdpdFwiOlxuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ3aWxkY2FyZFwiLCB2YWx1ZTogW3sgZnJvbTogMHgzMCwgdG86IDB4MzkgfV0sIG5lZ2F0aXZlOiBuZWdhdGl2ZSB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIldoaXRlc3BhY2VcIjpcbiAgICAgIHJldHVybiB7IHR5cGU6IFwid2lsZGNhcmRcIiwgdmFsdWU6IFt7IGZyb206IFwiXFx1MDAwOVwiLCB0bzogXCJcXHUwMDBEXCIgfSwgXCIgXCIsIFwiwoVcIiwgXCLCoFwiLCBcIuGagFwiLCB7IGZyb206IFwiXCIsIHRvOiBcIuKAjVwiIH0sIFwi4oCvXCIsIFwi4oGfXCIsIFwi44CAXCIsIFwi4aCOXCIsIFwi4oGgXCIsIFwi77u/XCJdLCBuZWdhdGl2ZTogbmVnYXRpdmUgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoL1tcXHNcXFNdLVtcXHNcXFNdLy50ZXN0KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwid2lsZGNhcmRcIiwgdmFsdWU6IFt7IGZyb206IHR5cGVbMF0sIHRvOiB0eXBlWzJdIH1dLCBuZWdhdGl2ZTogbmVnYXRpdmUgfTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cz1yZWdleEdyYW1tYXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./regex-rules.js\n");

/***/ }),

/***/ "./tree.js":
/*!*****************!*\
  !*** ./tree.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//Helper functions\n//Tree Implimentation from https://gist.github.com/RainbowDangerDash/e006151f60003487e208\nfunction Tree(data) {\n  this.data = data;\n  this.children = [];\n  this.parent = null;\n  this.length = 0;\n  this.level=0//useful for debugging how deep a node is\n}\nTree.fromJSON = function(jsonTree) {\n  var tree = JSON.parse(jsonTree),\n    finalTree = tree.map(function(a) { return new Tree(a.data) });\n  tree.forEach(function(a, i) { a.children.forEach(function(b) { finalTree[i].addChild(finalTree[b]) }) });\n  return finalTree[0];\n}\nTree.prototype.addChild = function(t) {\n  if (!(t instanceof this.constructor)) { t = new Tree(t) }\n  t.parent = this;\n  this.length = this.children.push(t);\n  t.level=this.level+1\n  return t;\n}\nTree.prototype.removeChild = function(i) {\n  var c = this.children.splice(i, 1)[0];\n  this.length = this.children.length;\n  c && (c.parent = null);\n  return c;\n}\nTree.prototype.splice=function(start,end){\n    var c = this.children.splice(start,end);\n  this.length = this.children.length;\n  return c;\n}\nTree.prototype.detachFromParent = function() {\n  var parent = this.parent;\n  if (parent) {\n    parent.removeChild(parent.children.indexOf(this));\n  }\n  return parent;\n}\nTree.prototype.popChild = function() {\n  var c = this.children.pop();\n  c.detachFromParent && c.detachFromParent();\n  return c;\n}\nTree.prototype.previousSibling=function(){\n  return this.parent&&this.parent.children[this.parent.children.indexOf(this)-1]\n}\n//Walk the tree\nTree.prototype.forEach = function(f, r, t, i) {\n  //r is how deep you want to go, 0 for unlimited.\n  //t is the level of the children you want, 0 for unlimited,\n  //if you for example only want the children and beyond, but not the value itself, then t would be 1,\n  //if you want the grandchildren and beyond but not the children, t would be 2\n  //go back i number of steps to see if there are parents\n  for (var ii = i, node = this; ii && node.parent && (t > 0 && r > 0); ii--) {\n    node = node.parent;\n    if (node == this) { //if parent node is equal to this node, then skip\n      return this\n    }\n  }\n  i = i | 0;\n  r = r | 0;\n  t = t | 0;\n  if (t-- <= 0) {\n    f(this, i);\n  }\n  if (--r) {\n    this.children.forEach(function(a) { a.forEach(f, r, t, i + 1) });\n  }\n  return this;\n}\nTree.prototype.forEachChild = function(f) {\n  return this.forEach(f, 2, 1, 0);\n};\n(function() {\n  var _find = function(f) {\n    var c = this.children;\n    if (!c) { return false }\n    for (var d, i = 0, l = c.length; i < l; i++) {\n      if (d = f.call(arguments[1], c[i], c)) {\n        return d;\n      }\n    };\n  }\n  Tree.prototype._find = _find;\n  Tree.prototype.find = function(f, r, t) {\n    r = r | 0;\n    t = t | 0\n    return ((t-- <= 0) ? (f(this) && this) : false) || ((--r) ? this._find(function(a) { return a.find(f, r, t) }) : false);\n  }\n})();\nTree.prototype.findIndex = function(f) {\n  return this.children.findIndex(f);\n}\nTree.prototype.getChild = function(i) {\n  return this.children[i];\n}\nTree.prototype.getFirstChild = function() {\n  return this.children[0];\n}\nTree.prototype.getLastChild = function() {\n  return this.children[this.children.length - 1];\n}\nTree.prototype.toJSON = function() {\n  var child = [];\n  this.forEach(function(a) { child.push(a) });\n  return JSON.stringify(child.map(function(a) {\n    return {\n      data: a.data,\n      children: a.children.map(function(b) { return child.indexOf(b) })\n    }\n  }))\n}\n\nmodule.exports = Tree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cmVlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdHJlZS5qcz9hMzkyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vSGVscGVyIGZ1bmN0aW9uc1xuLy9UcmVlIEltcGxpbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vUmFpbmJvd0RhbmdlckRhc2gvZTAwNjE1MWY2MDAwMzQ4N2UyMDhcbmZ1bmN0aW9uIFRyZWUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLmxldmVsPTAvL3VzZWZ1bCBmb3IgZGVidWdnaW5nIGhvdyBkZWVwIGEgbm9kZSBpc1xufVxuVHJlZS5mcm9tSlNPTiA9IGZ1bmN0aW9uKGpzb25UcmVlKSB7XG4gIHZhciB0cmVlID0gSlNPTi5wYXJzZShqc29uVHJlZSksXG4gICAgZmluYWxUcmVlID0gdHJlZS5tYXAoZnVuY3Rpb24oYSkgeyByZXR1cm4gbmV3IFRyZWUoYS5kYXRhKSB9KTtcbiAgdHJlZS5mb3JFYWNoKGZ1bmN0aW9uKGEsIGkpIHsgYS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGIpIHsgZmluYWxUcmVlW2ldLmFkZENoaWxkKGZpbmFsVHJlZVtiXSkgfSkgfSk7XG4gIHJldHVybiBmaW5hbFRyZWVbMF07XG59XG5UcmVlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKCEodCBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpKSB7IHQgPSBuZXcgVHJlZSh0KSB9XG4gIHQucGFyZW50ID0gdGhpcztcbiAgdGhpcy5sZW5ndGggPSB0aGlzLmNoaWxkcmVuLnB1c2godCk7XG4gIHQubGV2ZWw9dGhpcy5sZXZlbCsxXG4gIHJldHVybiB0O1xufVxuVHJlZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbihpKSB7XG4gIHZhciBjID0gdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMSlbMF07XG4gIHRoaXMubGVuZ3RoID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGMgJiYgKGMucGFyZW50ID0gbnVsbCk7XG4gIHJldHVybiBjO1xufVxuVHJlZS5wcm90b3R5cGUuc3BsaWNlPWZ1bmN0aW9uKHN0YXJ0LGVuZCl7XG4gICAgdmFyIGMgPSB0aGlzLmNoaWxkcmVuLnNwbGljZShzdGFydCxlbmQpO1xuICB0aGlzLmxlbmd0aCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICByZXR1cm4gYztcbn1cblRyZWUucHJvdG90eXBlLmRldGFjaEZyb21QYXJlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICBpZiAocGFyZW50KSB7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpKTtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuVHJlZS5wcm90b3R5cGUucG9wQ2hpbGQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGMgPSB0aGlzLmNoaWxkcmVuLnBvcCgpO1xuICBjLmRldGFjaEZyb21QYXJlbnQgJiYgYy5kZXRhY2hGcm9tUGFyZW50KCk7XG4gIHJldHVybiBjO1xufVxuVHJlZS5wcm90b3R5cGUucHJldmlvdXNTaWJsaW5nPWZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuY2hpbGRyZW5bdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKS0xXVxufVxuLy9XYWxrIHRoZSB0cmVlXG5UcmVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oZiwgciwgdCwgaSkge1xuICAvL3IgaXMgaG93IGRlZXAgeW91IHdhbnQgdG8gZ28sIDAgZm9yIHVubGltaXRlZC5cbiAgLy90IGlzIHRoZSBsZXZlbCBvZiB0aGUgY2hpbGRyZW4geW91IHdhbnQsIDAgZm9yIHVubGltaXRlZCxcbiAgLy9pZiB5b3UgZm9yIGV4YW1wbGUgb25seSB3YW50IHRoZSBjaGlsZHJlbiBhbmQgYmV5b25kLCBidXQgbm90IHRoZSB2YWx1ZSBpdHNlbGYsIHRoZW4gdCB3b3VsZCBiZSAxLFxuICAvL2lmIHlvdSB3YW50IHRoZSBncmFuZGNoaWxkcmVuIGFuZCBiZXlvbmQgYnV0IG5vdCB0aGUgY2hpbGRyZW4sIHQgd291bGQgYmUgMlxuICAvL2dvIGJhY2sgaSBudW1iZXIgb2Ygc3RlcHMgdG8gc2VlIGlmIHRoZXJlIGFyZSBwYXJlbnRzXG4gIGZvciAodmFyIGlpID0gaSwgbm9kZSA9IHRoaXM7IGlpICYmIG5vZGUucGFyZW50ICYmICh0ID4gMCAmJiByID4gMCk7IGlpLS0pIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUgPT0gdGhpcykgeyAvL2lmIHBhcmVudCBub2RlIGlzIGVxdWFsIHRvIHRoaXMgbm9kZSwgdGhlbiBza2lwXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuICBpID0gaSB8IDA7XG4gIHIgPSByIHwgMDtcbiAgdCA9IHQgfCAwO1xuICBpZiAodC0tIDw9IDApIHtcbiAgICBmKHRoaXMsIGkpO1xuICB9XG4gIGlmICgtLXIpIHtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oYSkgeyBhLmZvckVhY2goZiwgciwgdCwgaSArIDEpIH0pO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuVHJlZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24oZikge1xuICByZXR1cm4gdGhpcy5mb3JFYWNoKGYsIDIsIDEsIDApO1xufTtcbihmdW5jdGlvbigpIHtcbiAgdmFyIF9maW5kID0gZnVuY3Rpb24oZikge1xuICAgIHZhciBjID0gdGhpcy5jaGlsZHJlbjtcbiAgICBpZiAoIWMpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBmb3IgKHZhciBkLCBpID0gMCwgbCA9IGMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZCA9IGYuY2FsbChhcmd1bWVudHNbMV0sIGNbaV0sIGMpKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgVHJlZS5wcm90b3R5cGUuX2ZpbmQgPSBfZmluZDtcbiAgVHJlZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKGYsIHIsIHQpIHtcbiAgICByID0gciB8IDA7XG4gICAgdCA9IHQgfCAwXG4gICAgcmV0dXJuICgodC0tIDw9IDApID8gKGYodGhpcykgJiYgdGhpcykgOiBmYWxzZSkgfHwgKCgtLXIpID8gdGhpcy5fZmluZChmdW5jdGlvbihhKSB7IHJldHVybiBhLmZpbmQoZiwgciwgdCkgfSkgOiBmYWxzZSk7XG4gIH1cbn0pKCk7XG5UcmVlLnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbihmKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkcmVuLmZpbmRJbmRleChmKTtcbn1cblRyZWUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24oaSkge1xuICByZXR1cm4gdGhpcy5jaGlsZHJlbltpXTtcbn1cblRyZWUucHJvdG90eXBlLmdldEZpcnN0Q2hpbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF07XG59XG5UcmVlLnByb3RvdHlwZS5nZXRMYXN0Q2hpbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbn1cblRyZWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2hpbGQgPSBbXTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGEpIHsgY2hpbGQucHVzaChhKSB9KTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNoaWxkLm1hcChmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IGEuZGF0YSxcbiAgICAgIGNoaWxkcmVuOiBhLmNoaWxkcmVuLm1hcChmdW5jdGlvbihiKSB7IHJldHVybiBjaGlsZC5pbmRleE9mKGIpIH0pXG4gICAgfVxuICB9KSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmVlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./tree.js\n");

/***/ })

/******/ });